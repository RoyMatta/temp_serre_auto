#include "config.h"
#include <Adafruit_MAX31865.h>
#include <SPI.h>

#include <WiFi.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>

WiFiClient espClient; //Nous declarons l'esp comme un client du reseau WIFI
PubSubClient client(espClient); //Nous declarons l'esp comme un client du reseau MQTT

Adafruit_MAX31865 thermo1 = Adafruit_MAX31865(MODULE_TEMP_A_CS, MOSI_pin, MISO_pin, CLK_pin);
Adafruit_MAX31865 thermo2 = Adafruit_MAX31865(MODULE_TEMP_B_CS, MOSI_pin, MISO_pin, CLK_pin);

void wirelessSetup(){
    WiFi.begin(ssid, password); //Connexion au WIFI
    client.setServer(mqttServer, mqttPort); //Connexion au MQTT
    //client.setCallback(callback); // Set the callback function
    client.connect("ESP32Client", mqttUsername, mqttPassword);
}

unsigned long lastWifiConnexion = 0;
bool reconnectWiFi() {
  // Attempt to reconnect to WiFi
  if ( millis() > lastWifiConnexion + TIMEOUT_MAX_CONNECTIONS) {  //retente si delai dépassé
    Serial.println("Connecting to WiFi...");
    WiFi.begin(ssid, password);
    Serial.print(" trying wifi...");
    lastWifiConnexion = millis();       
      
  }
  return WiFi.status() == WL_CONNECTED;
}

unsigned long lastMQTTConnexion = 0;
bool reconnectMQTT() {
  if ( millis() > lastMQTTConnexion + TIMEOUT_MAX_CONNECTIONS) {  // Wait 5 seconds before retrying
    // Loop until we're reconnected to MQTT
    Serial.println("Connecting to MQTT...");
    // Attempt to connect
    if (client.connect("ESP32Client", mqttUsername, mqttPassword)) {
      Serial.println("Connected to MQTT");
      // Subscribe to the topic here again because the subscription is lost on disconnection
      client.subscribe("/Moteurs/Serre1");
      client.subscribe("/Ventilateurs/Serre1");
    } else {
      Serial.print("Failed to connect to MQTT, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
    }
    lastMQTTConnexion = millis();       
  }
  return client.connected();
}

bool checkConnected() {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("WiFi not connected");
        EtatSysteme.erreurWifi = !reconnectWiFi();
    }
    if (!client.connected()) {
        Serial.println("MQTT not connected");
        EtatSysteme.erreurMQTT = !reconnectMQTT();
    }
    return ((!EtatSysteme.erreurWifi) && (!EtatSysteme.erreurMQTT));
}

void sendDataToMQTT(int index) {
    StaticJsonDocument<200> doc;
    doc[IAnalogique[index].nom] = IAnalogique[index].valeur;
    char jsonBuffer[512];
    serializeJson(doc, jsonBuffer);
    if (client.publish(nomSerre, jsonBuffer)) {
        Serial.println("Message sent successfully");
    } else {
        Serial.println("Failed to send message");
    }
}

void outputAnalogSetup(){
    thermo1.begin(MAX31865_3WIRE);
    thermo2.begin(MAX31865_3WIRE);
    pinMode(humidity_A_pin, INPUT);
    pinMode(humidity_B_pin, INPUT);
    analogReadResolution(12);
}

float mVToRHLin(int mV) { // Linear approximation of relative humidity (quick but less accurate)
  return (0.03892*(3.6/2100)*mV) - 42.017;
}

void outputAnalogRead(int index){
    if (index == 0 || index == 1){
        IAnalogique[index].valeur = mVToRHLin(analogReadMilliVolts(IAnalogique[index].pin));
    }
    else if (index == 2){
        IAnalogique[index].valeur = thermo1.temperature(RNOMINAL, RREF);
    }
    else if (index == 3){
        IAnalogique[index].valeur = thermo2.temperature(RNOMINAL, RREF);
    }
    else {
        Serial.println("Invalid index for outputAnalogRead");
    }
}

void setup() {
    Serial.begin(115200);
    outputAnalogSetup();
    wirelessSetup();
}

void loop(){
    for (int i=0; i<4; i++){
        outputAnalogRead(i);
        Serial.print("Valeur analogique ");
        Serial.print(IAnalogique[i].nom);
        Serial.print(": ");
        Serial.println(IAnalogique[i].valeur);
        if (checkConnected()) {
            sendDataToMQTT(i);
        }
    }
}